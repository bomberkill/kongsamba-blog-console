"use client";
import { DevtoolsProvider } from "@providers/devtools";
import { Authenticated, GitHubBanner, I18nProvider, Refine } from "@refinedev/core";
import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";
import routerProvider from "@refinedev/nextjs-router";
// import { RefineThemes, useNotificationProvider } from "@refinedev/mantine";

import { Metadata } from "next";
// import {} from "@mantine/notifications"
import React, { Suspense } from "react";
// import { appWithTranslation } from 'next-i18next'

import { apolloClient, dataProvider } from "@providers/data-provider";
import "@styles/global.css";
import { useTranslation as NextUseTranslation } from "next-i18next";
import "@app/i18n"
import { Avatar, ColorScheme, ColorSchemeProvider, MantineProvider } from "@mantine/core";
import { useLocalStorage } from "@mantine/hooks";
import { RefineThemes, ThemedLayoutV2, ThemedTitleV2, useNotificationProvider } from "@refinedev/mantine";
import { ThemedHeaderV2 } from "@components/layout/header";
import { NotificationsProvider } from "@mantine/notifications";
import { ApolloClient, ApolloProvider } from "@apollo/client";
import Login from "./login/page";
import "../../firebaseConfig";
import { authProvider } from "@providers/auth-provider";
import { IconHome, IconUserShield, IconUsers, IconNews, IconPlaylist} from "@tabler/icons-react";


// export const metadata: Metadata = {
//   title: "Refine",
//   description: "Generated by create refine app",
//   icons: {
//     icon: "/favicon.ico",
//   },
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const renderComponents = () => {
    // if (!localStorage.getItem("auth")) {
    //   return <>{children}</>;
    // } else {
    // }
    return (
      <Authenticated fallback={<Login/>} key="page">
        <ThemedLayoutV2
        Title={({ collapsed }) => {
          return (
            <ThemedTitleV2
              collapsed={collapsed}
              icon={<Avatar src="/images/kongsamba.png" size={50} style={{objectFit: "contain"}} alt="logo" />}
              text="Kongsamba Blog"
            />
          );
        }}
        Header={() =><ThemedHeaderV2/>}
        >
          <>{children}</>
        </ThemedLayoutV2>
      </Authenticated>
    );
  };
  const [colorScheme, setColorScheme] = useLocalStorage<ColorScheme>({
    key: "mantine-color-schema",
    defaultValue: "light",
    getInitialValueInEffect: true
  });
  const toggleColorScheme = (value: ColorScheme) => 
    setColorScheme(value || (colorScheme === "dark" ? "light" : "dark"));
  const {t, i18n} = NextUseTranslation();
  const i18nProvider: I18nProvider = {
    translate: (key: string, options?: any, defaultMessage?: string) => t(key),
    changeLocale: (lang: string, options?: any) => i18n.changeLanguage(lang),
    getLocale: () => i18n.language,
  };
  return (
    <html lang="fr">
      <body>
        <Suspense>
          {/* <GitHubBanner /> */}
          <RefineKbarProvider>
            <ColorSchemeProvider
              colorScheme={colorScheme}
              toggleColorScheme={toggleColorScheme}
            >
              <MantineProvider theme={{ ...RefineThemes.Blue, colorScheme: colorScheme }}withGlobalStyles withNormalizeCSS>
                <ApolloProvider client={apolloClient}>
                  <NotificationsProvider position="top-right">
                    <Refine
                    notificationProvider={useNotificationProvider}
                      routerProvider={routerProvider}
                      dataProvider={dataProvider}
                      authProvider={authProvider}
                      i18nProvider={i18nProvider}
                      options={{
                        syncWithLocation: true,
                        warnWhenUnsavedChanges: true,
                        useNewQueryKeys: true,
                        projectId: "ahbaBE-hGHmhT-vHHz4S",
                      }}
                      resources={[
                        {
                          name: "dashboard",
                          list: "/dashboard",
                          meta: {
                            label: t("pages.dashboard.title"),
                            icon: <IconHome size={18}/>
                          }
                        },
                        {
                          name: "articles",
                          list: "/articles",
                          create: "/articles/create",
                          show: "/articles/show/:id",
                          edit: "/articles/edit/:id",
                          meta: {
                            label: t("pages.articles.title"),
                            icon: <IconNews size={18}/>
                          }
                        },
                        {
                          name: "playlists",
                          list: "/playlists",
                          create: "/playlists/create",
                          show: "/playlists/show/:id",
                          edit: "/playlists/edit/:id",
                          meta: {
                            label: t("pages.playlists.title"),
                            icon: <IconPlaylist size={18}/>
                          }
                        },
                        {
                          name: "users",
                          list: "/users",
                          show: "/users/show/:id",
                          meta: {
                            label: t("pages.users.title"),
                            icon: <IconUsers size={18}/>
                          }
                        },
                        {
                          name: "admins",
                          list: "/admins",
                          create: "/admins/create",
                          show: "/admins/show/:id",
                          edit: "/admins/edit/:id",
                          meta: {
                            label: t("pages.admins.title"),
                            icon: <IconUserShield size={18}/>
                          }
                        }
                      ]}
                    >
                      {renderComponents()}
                      <RefineKbar />
                    </Refine>
                  </NotificationsProvider>
                </ApolloProvider>
              </MantineProvider>
            </ColorSchemeProvider>
          </RefineKbarProvider>
        </Suspense>
      </body>
    </html>
  );
}
